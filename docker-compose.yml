version: '3'
services:

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - ./volumes/zookeeper/data:/var/lib/zookeeper/data
      - ./volumes/zookeeper/log:/var/lib/zookeeper/log
      - ./volumes/zookeeper/secrets:/etc/zookeeper/secrets

  kafka-broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka-broker
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka-broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    volumes:
      - ./volumes/kafka/data:/var/lib/kafka/data
      - ./volumes/kafka/secrets:/etc/kafka/secrets
    depends_on:
      - zookeeper

  kafka-ui:
      image: provectuslabs/kafka-ui
      container_name: kafka-ui
      restart: always
      ports:
        - 4000:8080
      environment:
        KAFKA_CLUSTERS_0_NAME: local
        KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-broker:29092
        KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper: 2181
      depends_on:
        - kafka-broker

  mysql:
    image: mysql:5.7.33
    container_name: mysql
    restart: always
    ports:
      - 3400:3306
    environment:
      MYSQL_ROOT_PASSWORD: guest
      MYSQL_DATABASE: keycloak
      MYSQL_USER: guest
      MYSQL_PASSWORD: guest
    volumes:
      - ./volumes/mysql:/var/lib/mysql

  keycloak:
    image: jboss/keycloak:16.1.1
    container_name: keycloak
    ports:
      - 5000:8080
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: mysql
      DB_DATABASE: keycloak
      DB_USER: guest
      DB_PASSWORD: guest
      KEYCLOAK_USER: guest
      KEYCLOAK_PASSWORD: guest
    depends_on:
      - mysql

  front-end:
    container_name: front-end
    build:
      context: .
      dockerfile: ./front-end/Dockerfile
    volumes:
      - ./:/usr/src/app/front-end
      - /usr/src/app/front-end/node_modules
    ports:
      - 6000:3000
    stdin_open: true
    environment:
      - CHOKIDAR_USEPOLLING=true
  api:
    build:
      context: .
      dockerfile: ./api/Dockerfile
    volumes:
      - ./src:/home/node/api/src
      - ./node_modules:/home/node/api/node_modules
    environment:
      - NODE_ENV=development
    working_dir: /home/node/api
    container_name: api
    ports:
      - 3000:3000

  observer:
    build:
      context: .
      dockerfile: ./observer/Dockerfile
    volumes:
      - ./src:/home/node/observer/src
      - ./node_modules:/home/node/observer/node_modules
    environment:
      - NODE_ENV=development
    working_dir: /home/node/observer
    container_name: observer
    ports:
      - 4000:3000

  worker:
    build:
      context: .
      dockerfile: ./worker/Dockerfile
    volumes:
      - ./src:/home/node/worker/src
      - ./node_modules:/home/node/worker/node_modules
    environment:
      - NODE_ENV=development
    working_dir: /home/node/worker
    container_name: worker
    ports:
      - 5000:3000